// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LibraryPage renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LibraryPage
    booksInShelf={Array []}
    handleShelfChange={[MockFunction]}
    loading={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="list-books-title"
        >
          <h1>
            MyReads
          </h1>
        </div>,
        <Spin
          size="large"
          spinning={true}
          tip="Loading..."
          wrapperClassName=""
        >
          <div
            className="list-books-content"
          >
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="currentlyReading"
              title="Currently Reading"
            />
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="wantToRead"
              title="Want to Read"
            />
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="read"
              title="Read"
            />
          </div>
        </Spin>,
        <div
          className="open-search"
        >
          <Link
            className="search-book"
            replace={false}
            to="/search"
          >
            <button>
              Add a book
            </button>
          </Link>
        </div>,
      ],
      "className": "list-books",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h1>
            MyReads
          </h1>,
          "className": "list-books-title",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "MyReads",
          },
          "ref": null,
          "rendered": "MyReads",
          "type": "h1",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="list-books-content"
          >
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="currentlyReading"
              title="Currently Reading"
            />
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="wantToRead"
              title="Want to Read"
            />
            <BookShelf
              books={Array []}
              handleShelfChange={[MockFunction]}
              shelf="read"
              title="Read"
            />
          </div>,
          "size": "large",
          "spinning": true,
          "tip": "Loading...",
          "wrapperClassName": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="currentlyReading"
                title="Currently Reading"
              />,
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="wantToRead"
                title="Want to Read"
              />,
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="read"
                title="Read"
              />,
            ],
            "className": "list-books-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "books": Array [],
                "handleShelfChange": [MockFunction],
                "shelf": "currentlyReading",
                "title": "Currently Reading",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "books": Array [],
                "handleShelfChange": [MockFunction],
                "shelf": "wantToRead",
                "title": "Want to Read",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "books": Array [],
                "handleShelfChange": [MockFunction],
                "shelf": "read",
                "title": "Read",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            className="search-book"
            replace={false}
            to="/search"
          >
            <button>
              Add a book
            </button>
          </Link>,
          "className": "open-search",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <button>
              Add a book
            </button>,
            "className": "search-book",
            "replace": false,
            "to": "/search",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Add a book",
            },
            "ref": null,
            "rendered": "Add a book",
            "type": "button",
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="list-books-title"
          >
            <h1>
              MyReads
            </h1>
          </div>,
          <Spin
            size="large"
            spinning={true}
            tip="Loading..."
            wrapperClassName=""
          >
            <div
              className="list-books-content"
            >
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="currentlyReading"
                title="Currently Reading"
              />
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="wantToRead"
                title="Want to Read"
              />
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="read"
                title="Read"
              />
            </div>
          </Spin>,
          <div
            className="open-search"
          >
            <Link
              className="search-book"
              replace={false}
              to="/search"
            >
              <button>
                Add a book
              </button>
            </Link>
          </div>,
        ],
        "className": "list-books",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h1>
              MyReads
            </h1>,
            "className": "list-books-title",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "MyReads",
            },
            "ref": null,
            "rendered": "MyReads",
            "type": "h1",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="list-books-content"
            >
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="currentlyReading"
                title="Currently Reading"
              />
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="wantToRead"
                title="Want to Read"
              />
              <BookShelf
                books={Array []}
                handleShelfChange={[MockFunction]}
                shelf="read"
                title="Read"
              />
            </div>,
            "size": "large",
            "spinning": true,
            "tip": "Loading...",
            "wrapperClassName": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <BookShelf
                  books={Array []}
                  handleShelfChange={[MockFunction]}
                  shelf="currentlyReading"
                  title="Currently Reading"
                />,
                <BookShelf
                  books={Array []}
                  handleShelfChange={[MockFunction]}
                  shelf="wantToRead"
                  title="Want to Read"
                />,
                <BookShelf
                  books={Array []}
                  handleShelfChange={[MockFunction]}
                  shelf="read"
                  title="Read"
                />,
              ],
              "className": "list-books-content",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "books": Array [],
                  "handleShelfChange": [MockFunction],
                  "shelf": "currentlyReading",
                  "title": "Currently Reading",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "books": Array [],
                  "handleShelfChange": [MockFunction],
                  "shelf": "wantToRead",
                  "title": "Want to Read",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "books": Array [],
                  "handleShelfChange": [MockFunction],
                  "shelf": "read",
                  "title": "Read",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              className="search-book"
              replace={false}
              to="/search"
            >
              <button>
                Add a book
              </button>
            </Link>,
            "className": "open-search",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button>
                Add a book
              </button>,
              "className": "search-book",
              "replace": false,
              "to": "/search",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add a book",
              },
              "ref": null,
              "rendered": "Add a book",
              "type": "button",
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
